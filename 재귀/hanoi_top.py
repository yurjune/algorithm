'''
# 하노이의 탑
1. 목적: 1번 탑의 모든 디스크를 3번 탑으로 옮기기

2. 시뮬레이션
Q. 디스크가 2개 일 때(가벼운 순서로 1, 2)
1-1. 디스크 1을 보조기둥에 두고, 디스크 2를 목적기둥으로 옮긴다.
1-2. 디스크 1을 목적 기둥으로 옮긴다.

Q. 디스크가 3개 일 때
1-1. 시작기둥의 최하단 디스크(3)를 제외한 나머지(1,2)를 보조기둥에 옮긴다.
1-2. 시작기둥의 최하단 디스크(3)를 목적기둥에 옮긴다.
1-3. 시작기둥을 보조기둥으로 삼아 보조기둥의 최하단 디스크(2)를 제외한 나머지(1)를 시작기둥으로 옮긴다.
1-4. 보조기둥의 최하단 디스크(2)를 목적기둥으로 옮긴다.
1-5. 시작기둥에 옮겨둔 디스크(1)를 목적기둥으로 옮긴다.

* 1-1 의 나머지 디스크들을 보조기둥에 옮기는 과정은 보조기둥을 목적기둥으로 목적기둥을 보조기둥으로
여기고 재귀적으로 move_disk 함수를 호출하여 처리한다.

3. 시간복잡도
디스크의 개수가 N 개일 때, 최소 2^N-1 번의 이동 작업을 수행해야 한다.
따라서 O(n) 은 2^n-1 이다.
'''

N = 3
def move_disk(size, departure, arrival, via):
    if size == 0: return

    move_disk(size-1, departure, via, arrival)
    print(f'{departure} -> {arrival}')
    move_disk(size-1, via, arrival, departure)

print(2**N - 1) # 최소 이동 횟수
move_disk(N, 1, 3, 2)
